{"version":3,"sources":["bars.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BARS","1905","THIS_YEAR","Date","getUTCFullYear","YEARS","Array","fill","map","v","idx","App","React","useState","year","setYear","showChoc","htmlFor","id","onChange","e","target","value","fallBackImage","ev","src","searchResults","bars","exact","previousYear","nextYear","availableYear","findChoc","bar","string","replace","split","word","toLowerCase","join","alt","onError","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAAaA,EAAO,CAClBC,KAAM,CAAC,e,eCmBHC,GAAY,IAAIC,MAAOC,iBACvBC,EAAQC,MAAMJ,GAAaA,IAAa,IAAIC,MAAOC,iBAAmB,QACzEG,KAAK,IACLC,KAAI,SAACC,EAAGC,GAAJ,OAAYR,EAAYQ,KAsEhBC,MApEf,WAAgB,IAAD,EACWC,IAAMC,SAAwB,MADzC,mBACNC,EADM,KACAC,EADA,KAGPC,EAAW,SAACF,GAChBC,GAASD,IAmBX,GAAa,OAATA,EACF,OACE,iCACE,oEACA,uBAAOG,QAAQ,OAAf,kBACA,wBAAQC,GAAG,OAAOC,SAAU,SAACC,GAAD,OAAOJ,EAASI,EAAEC,OAAOC,QAArD,SACGjB,EAAMG,KAAI,SAACM,GAAD,OACT,iCAAoBA,GAAPA,WAOvB,IAAMS,EAAgB,SAACC,GACrBA,EAAGH,OAAOI,IAAM,uBAGZC,EAlCW,SAACZ,GAChB,GAAIA,KAAQd,EACV,MAAO,CAAEc,OAAMa,KAAM3B,EAAKc,GAAOc,OAAO,GAM1C,IAFA,IAAIC,EAAef,EAAO,EACtBgB,EAAWhB,EAAO,IACbe,KAAgB7B,MAAW8B,KAAY9B,IAC9C6B,GAA8B,EAC9BC,GAAsB,EAExB,IAAIC,EAAgBF,KAAgB7B,EAAO6B,EAAeC,EAC1D,MAAO,CAAEhB,KAAMiB,EAAeJ,KAAM3B,EAAK+B,GAAgBH,OAAO,GAqB5CI,CAASlB,GAE/B,OACE,iCACGY,EAAcE,OAAS,qCAAQd,EAAR,0CACtBY,EAAcE,OAAS,yDAA4BF,EAAcZ,KAA1C,yCAEzB,6BACGY,EAAcC,KAAKnB,KAAI,SAACyB,GAAD,OACtB,+BACE,qBAAKR,IAAG,gBAhECS,EAgEqBD,EA/DjCC,EACJC,QAAQ,OAAQ,KAChBC,MAAM,iBACN5B,KAAI,SAAC6B,GAAD,OAAUA,EAAKC,iBACnBC,KAAK,MA2DU,QAAkCC,IAAI,GAAGC,QAASlB,IAC1D,6BAAKU,MAFEA,GA/DC,IAACC,OAsEf,oDACA,uBAAOjB,QAAQ,OAAf,kBACA,wBAAQC,GAAG,OAAOC,SAAU,SAACC,GAAD,OAAOJ,EAASI,EAAEC,OAAOC,QAArD,SACGjB,EAAMG,KAAI,SAACM,GAAD,OACT,iCAAoBA,GAAPA,YCxER4B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.4b07a0b2.chunk.js","sourcesContent":["export const BARS = {\n  1905: [\"Dairy Milk\"],\n} as Record<number, string[]>\n","import React from \"react\"\nimport { BARS } from \"./bars\"\nimport \"./App.css\"\n\n// Images: https://pixabay.com/images/search/chocolate%20bar/\n\ninterface BarSearchResult {\n  year: number\n  bars: string[]\n  exact: boolean\n}\n\nconst toSnakeCase = (string: string) => {\n  return string\n    .replace(/\\W+/g, \" \")\n    .split(/ |\\B(?=[A-Z])/)\n    .map((word) => word.toLowerCase())\n    .join(\"_\")\n}\n\nconst THIS_YEAR = new Date().getUTCFullYear()\nconst YEARS = Array(THIS_YEAR - (THIS_YEAR - (new Date().getUTCFullYear() - 1899)))\n  .fill(\"\")\n  .map((v, idx) => THIS_YEAR - idx)\n\nfunction App() {\n  const [year, setYear] = React.useState<number | null>(null)\n\n  const showChoc = (year: string) => {\n    setYear(+year)\n  }\n\n  const findChoc = (year: number): BarSearchResult => {\n    if (year in BARS) {\n      return { year, bars: BARS[year], exact: true }\n    }\n\n    // search for years either side of the birth year\n    let previousYear = year - 1\n    let nextYear = year + 1\n    while (!(previousYear in BARS) && !(nextYear in BARS)) {\n      previousYear = previousYear - 1\n      nextYear = nextYear + 1\n    }\n    let availableYear = previousYear in BARS ? previousYear : nextYear\n    return { year: availableYear, bars: BARS[availableYear], exact: false }\n  }\n\n  if (year === null) {\n    return (\n      <main>\n        <h1>What is your birth year chocolate?</h1>\n        <label htmlFor=\"year\">Year</label>\n        <select id=\"year\" onChange={(e) => showChoc(e.target.value)}>\n          {YEARS.map((year) => (\n            <option key={year}>{year}</option>\n          ))}\n        </select>\n      </main>\n    )\n  }\n\n  const fallBackImage = (ev: any) => {\n    ev.target.src = \"bars/dairy_milk.jpg\"\n  }\n\n  const searchResults = findChoc(year)\n\n  return (\n    <main>\n      {searchResults.exact && <h1>In {year} these chocolate bars were launched</h1>}\n      {!searchResults.exact && <h1>Close to that year, in {searchResults.year} these chocolate bars were launched</h1>}\n\n      <ul>\n        {searchResults.bars.map((bar) => (\n          <li key={bar}>\n            <img src={`bars/${toSnakeCase(bar)}.jpg`} alt=\"\" onError={fallBackImage} />\n            <h2>{bar}</h2>\n          </li>\n        ))}\n      </ul>\n\n      <h3>Check another year</h3>\n      <label htmlFor=\"year\">Year</label>\n      <select id=\"year\" onChange={(e) => showChoc(e.target.value)}>\n        {YEARS.map((year) => (\n          <option key={year}>{year}</option>\n        ))}\n      </select>\n    </main>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}