{"version":3,"sources":["bars.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BARS","1825","1866","1879","1905","1908","1910","1914","1920","1924","1926","1928","1929","1930","1932","1934","1935","1936","1937","1941","1948","1957","1953","1958","1959","1960","1962","1963","1966","1967","1968","1970","1971","1973","1974","1975","1976","1980","1981","1984","1986","1989","1991","1992","1994","1995","1996","1997","1999","2002","2004","2006","2007","2018","toSnakeCase","string","replace","split","map","word","toLowerCase","join","THIS_YEAR","Date","getUTCFullYear","YEARS","Array","fill","v","idx","App","React","useState","year","setYear","id","htmlFor","onChange","e","showChoc","target","value","searchResults","bars","exact","previousYear","nextYear","availableYear","findChoc","everything","Object","keys","s","reverse","bar","className","src","alt","index","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.421b5d3d.chunk.js","sourcesContent":["export const BARS = {\n  1825: [\"Milka\"],\n  1866: [\"Fry's Chocolate Cream\"],\n  1879: [\"Bournville\"],\n\n  1905: [\"Dairy Milk\"],\n  1908: [\"Toblerone\"],\n\n  1910: [\"Walnut Whip\"],\n  1914: [\"Fry's Turkish Delight\"],\n\n  1920: [\"Flake\"],\n  1924: [\"Milky Way\"],\n  1926: [\"Cadbury Fruit and Nut\"],\n  1928: [\"Reeses Cups\"],\n  1929: [\"Crunchie\"],\n\n  1930: [\"Snickers\", \"Cadbury Whole Nut\"],\n  1932: [\"Mars Bar\", \"Terry's Chocolate Orange Bar\"],\n  1934: [\"Fry's Peppermint Cream\"],\n  1935: [\"Kit Kat\", \"Aero\"],\n  1936: [\"Milky Bar\"],\n  1937: [\"Smarties\", \"Maltesers\", \"Poppets\", \"Rolo\"],\n\n  1941: [\"M&Ms\"],\n  1948: [\"Fudge\"],\n\n  1957: [\"Munchies\", \"Revels\"],\n  1953: [\"Daim\"],\n  1958: [\"Picnic\"],\n  1959: [\"Aero Mint\", \"Caramac\"],\n\n  1960: [\"Galaxy\", \"Cadbury Buttons\"],\n  1962: [\"Topic\"],\n  1963: [\"Toffee Crisp\", \"Animal Bar\"],\n  1966: [\"Crunch\"],\n  1967: [\"Twix\", \"Minstrels\", \"Aztec\"],\n  1968: [\"Galaxy Ripple\"],\n\n  1970: [\"Curly Wurly\"],\n  1971: [\"Creme egg\"],\n  1973: [\"Freddo\"],\n  1974: [\"Kinder Surprise\"],\n  1975: [\"Kinder Bueno\"],\n  1976: [\"Double Decker\", \"Starbar\", \"Yorkie\", \"Yorkie Raisin\", \"Lion\", \"Cadbury Caramel\"],\n\n  1980: [\"Drifter\", \"Bitz Mint\"],\n  1981: [\"Wispa\"],\n  1984: [\"Twirl\", \"Bounty\", \"Spira\"],\n  1986: [\"Boost\", \"Secret\"],\n  1989: [\"Chomp\"],\n\n  1991: [\"Vice Versas\"],\n  1992: [\"Time Out\"],\n  1994: [\"Reese's Nutrageous\", \"Hershey's Cookies 'N' Creme\", \"Taz\"],\n  1995: [\"Wispa Gold\"],\n  1996: [\"Fuse\"],\n  1997: [\"Dairy Milk Tasters\"], // guess at date for Tasters\n  1999: [\"Kit Kat Chunky\", \"Nuts About Caramel\"],\n\n  2002: [\"Cadbury Dream\"],\n  2004: [\"Mars Delight\"],\n  2006: [\"Kit Kat Chunky Peanut Butter\"],\n  2007: [\"Mars Planets\"],\n  2018: [\"Darkmilk\"],\n} as Record<number, string[]>\n","import React from \"react\"\nimport { BARS } from \"./bars\"\nimport \"./App.css\"\n\n// Images: https://www.google.com/search?q=tesco\n// List: http://www.chocolatereview.co.uk/choctalk/index.php?topic=2942.0\n\ninterface BarSearchResult {\n  year: number\n  bars: string[]\n  exact: boolean\n}\n\nconst toSnakeCase = (string: string) => {\n  return string\n    .replace(/\\W+/g, \" \")\n    .split(/ |\\B(?=[A-Z])/)\n    .map((word) => word.toLowerCase())\n    .join(\"_\")\n}\n\nconst THIS_YEAR = new Date().getUTCFullYear()\nconst YEARS = Array(THIS_YEAR - (THIS_YEAR - (new Date().getUTCFullYear() - 1899)))\n  .fill(\"\")\n  .map((v, idx) => THIS_YEAR - idx)\n\nfunction App() {\n  const [year, setYear] = React.useState<number | null>(null)\n\n  const showChoc = (year: string) => {\n    setYear(+year)\n  }\n\n  const findChoc = (year: number): BarSearchResult => {\n    if (year in BARS) {\n      return { year, bars: BARS[year], exact: true }\n    }\n\n    // search for years either side of the birth year\n    let previousYear = year - 1\n    let nextYear = year + 1\n    while (!(previousYear in BARS) && !(nextYear in BARS)) {\n      previousYear = previousYear - 1\n      nextYear = nextYear + 1\n    }\n    let availableYear = previousYear in BARS ? previousYear : nextYear\n    return { year: availableYear, bars: BARS[availableYear], exact: false }\n  }\n\n  if (year === null) {\n    return (\n      <div id=\"search-screen\">\n        <h1>What is your birth year chocolate?</h1>\n\n        <div id=\"search\">\n          <label htmlFor=\"year\">Year: </label>\n          <select id=\"year\" onChange={(e) => showChoc(e.target.value)}>\n            {YEARS.map((year) => (\n              <option key={year}>{year}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n    )\n  }\n\n  const searchResults = findChoc(year)\n\n  const everything: number[] = Object.keys(BARS)\n    .map((s) => +s)\n    .reverse()\n\n  return (\n    <main>\n      {searchResults.exact && <h1>{`In ${year} these chocolate bars were launched`}</h1>}\n      {!searchResults.exact && (\n        <h1>{`Close to that year, in ${searchResults.year} these chocolate bars were launched`}</h1>\n      )}\n\n      <div id=\"results\">\n        {searchResults.bars.map((bar) => (\n          <div className=\"result\">\n            <img src={`bars/${toSnakeCase(bar)}.jpeg`} alt={bar} />\n            <span>{bar}</span>\n          </div>\n        ))}\n      </div>\n\n      <h2>The great chocolate bar timeline</h2>\n\n      <div className=\"timeline\">\n        {everything.map((year, index) => (\n          <div className={`container ${index % 2 === 0 ? \"left\" : \"right\"}`}>\n            <div className=\"content\">\n              <h3>{year}</h3>\n              <p>\n                {BARS[year].map((bar) => (\n                  <>\n                    <img src={`bars/${toSnakeCase(bar)}.jpeg`} alt={bar} />\n                    <p>{bar}</p>\n                  </>\n                ))}\n              </p>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <div id=\"feedback\">\n        Something wrong or missing? Send me an email to joe@joejag.com, or tell me on{\" \"}\n        <a href=\"https://twitter.com/joe_jag\">Twitter</a>\n      </div>\n    </main>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}