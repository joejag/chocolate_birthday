{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","React","useState","year","setYear","showChoc","htmlFor","id","onChange","e","target","value","YEARS","map","searchResults","BARS","bars","exact","findChoc","fallBackImage","ev","src","bar","string","replace","split","word","toLowerCase","join","alt","onError","1905","THIS_YEAR","Date","getUTCFullYear","Array","fill","v","idx","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAgFeA,MA5Df,WAAgB,IAAD,EACWC,IAAMC,SAAwB,MADzC,mBACNC,EADM,KACAC,EADA,KAGPC,EAAW,SAACF,GAChBC,GAASD,IAWX,GAAa,OAATA,EACF,OACE,iCACE,oEACA,uBAAOG,QAAQ,OAAf,kBACA,wBAAQC,GAAG,OAAOC,SAAU,SAACC,GAAD,OAAOJ,EAASI,EAAEC,OAAOC,QAArD,SACGC,EAAMC,KAAI,SAACV,GAAD,OACT,iCAAoBA,GAAPA,WAOvB,IAAMW,EAtBW,SAACX,GAChB,OAAIA,KAAQY,EACH,CAAEZ,OAAMa,KAAMD,EAAKZ,GAAOc,OAAO,GAGnC,CAAEd,KAAM,KAAMa,KAAMD,EAAK,MAAOE,OAAO,GAiB1BC,CAASf,GAEzBgB,EAAgB,SAACC,GACrBA,EAAGV,OAAOW,IAAM,uBAGlB,OACE,iCACGP,EAAcG,OAAS,qCAAQd,EAAR,0CACtBW,EAAcG,OAAS,yDAA4BH,EAAcX,KAA1C,yCAEzB,6BACGW,EAAcE,KAAKH,KAAI,SAACS,GAAD,OACtB,+BACE,qBAAKD,IAAG,gBAnDCE,EAmDqBD,EAlDjCC,EACJC,QAAQ,OAAQ,KAChBC,MAAM,iBACNZ,KAAI,SAACa,GAAD,OAAUA,EAAKC,iBACnBC,KAAK,MA8CU,QAAkCC,IAAI,GAAGC,QAASX,IAC1D,6BAAKG,MAFEA,GAlDC,IAACC,OAyDf,oDACA,uBAAOjB,QAAQ,OAAf,kBACA,wBAAQC,GAAG,OAAOC,SAAU,SAACC,GAAD,OAAOJ,EAASI,EAAEC,OAAOC,QAArD,SACGC,EAAMC,KAAI,SAACV,GAAD,OACT,iCAAoBA,GAAPA,YASjBY,EAAO,CAAEgB,KAAM,CAAC,eAEhBC,GAAY,IAAIC,MAAOC,iBACvBtB,EAAQuB,MAAMH,GAAaA,IAAa,IAAIC,MAAOC,iBAAmB,QACzEE,KAAK,IACLvB,KAAI,SAACwB,EAAGC,GAAJ,OAAYN,EAAYM,KCzEhBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.03167ed0.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./App.css\"\n\n// Images: https://pixabay.com/images/search/chocolate%20bar/\n// https://www.dreamstime.com/photos-images/cadbury.html\n\ninterface BarSearchResult {\n  year: number\n  bars: string[]\n  exact: boolean\n}\n\nconst toSnakeCase = (string: string) => {\n  return string\n    .replace(/\\W+/g, \" \")\n    .split(/ |\\B(?=[A-Z])/)\n    .map((word) => word.toLowerCase())\n    .join(\"_\")\n}\n\nfunction App() {\n  const [year, setYear] = React.useState<number | null>(null)\n\n  const showChoc = (year: string) => {\n    setYear(+year)\n  }\n\n  const findChoc = (year: number): BarSearchResult => {\n    if (year in BARS) {\n      return { year, bars: BARS[year], exact: true }\n    }\n\n    return { year: 1905, bars: BARS[1905], exact: false }\n  }\n\n  if (year === null) {\n    return (\n      <main>\n        <h1>What is your birth year chocolate?</h1>\n        <label htmlFor=\"year\">Year</label>\n        <select id=\"year\" onChange={(e) => showChoc(e.target.value)}>\n          {YEARS.map((year) => (\n            <option key={year}>{year}</option>\n          ))}\n        </select>\n      </main>\n    )\n  }\n\n  const searchResults = findChoc(year)\n\n  const fallBackImage = (ev: any) => {\n    ev.target.src = \"bars/dairy_milk.jpg\"\n  }\n\n  return (\n    <main>\n      {searchResults.exact && <h1>In {year} these chocolate bars were launched</h1>}\n      {!searchResults.exact && <h1>Close to that year, in {searchResults.year} these chocolate bars were launched</h1>}\n\n      <ul>\n        {searchResults.bars.map((bar) => (\n          <li key={bar}>\n            <img src={`bars/${toSnakeCase(bar)}.jpg`} alt=\"\" onError={fallBackImage} />\n            <h2>{bar}</h2>\n          </li>\n        ))}\n      </ul>\n\n      <h3>Check another year</h3>\n      <label htmlFor=\"year\">Year</label>\n      <select id=\"year\" onChange={(e) => showChoc(e.target.value)}>\n        {YEARS.map((year) => (\n          <option key={year}>{year}</option>\n        ))}\n      </select>\n    </main>\n  )\n}\n\nexport default App\n\nconst BARS = { 1905: [\"Dairy Milk\"] } as Record<number, string[]>\n\nconst THIS_YEAR = new Date().getUTCFullYear()\nconst YEARS = Array(THIS_YEAR - (THIS_YEAR - (new Date().getUTCFullYear() - 1899)))\n  .fill(\"\")\n  .map((v, idx) => THIS_YEAR - idx)\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}